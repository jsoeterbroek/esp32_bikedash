/*******************************************************************************
 ******************************************************************************/
#include <../common/common.h>
// Font files are stored in SPIFFS, so load the library
//#include <FS.h>
//#include <SPIFFS.h>
#include <SPI.h>

/* You only need to format SPIFFS the first time you run a
   test or else use the SPIFFS plugin to create a partition
   https://github.com/me-no-dev/arduino-esp32fs-plugin */



//void listDir(fs::FS &fs, const char * dirname, uint8_t levels){
//    Serial.printf("Listing directory: %s\r\n", dirname);
//
//    File root = fs.open(dirname);
//    if(!root){
//        Serial.println("- failed to open directory");
//        return;
//    }
//    if(!root.isDirectory()){
//        Serial.println(" - not a directory");
//        return;
//    }

//    File file = root.openNextFile();
//    while(file){
//        if(file.isDirectory()){
//            Serial.print("  DIR : ");
//            Serial.println(file.name());
//            if(levels){
//                listDir(fs, file.name(), levels -1);
//            }
//        } else {
//            Serial.print("  FILE: ");
//            Serial.print(file.name());
//            Serial.print("\tSIZE: ");
//            Serial.println(file.size());
////        }
//        file = root.openNextFile();
//    }
//}

//void readFile(fs::FS &fs, const char * path){
//    Serial.printf("Reading file: %s\r\n", path);
//
//    File file = fs.open(path);
//    if(!file || file.isDirectory()){
//        Serial.println("- failed to open file for reading");
//        return;
//    }

//    Serial.println("- read from file:");
//    while(file.available()){
//        Serial.write(file.read());
//    }
//    file.close();
//}

//void writeFile(fs::FS &fs, const char * path, const char * message){
//    Serial.printf("Writing file: %s\r\n", path);
//    File file = fs.open(path, FILE_WRITE);
//    if(!file){
//        Serial.println("- failed to open file for writing");
//        return;
//    }
//    if(file.print(message)){
//        Serial.println("- file written");
//    } else {
//        Serial.println("- write failed");
//    }
//    file.close();
//}

void setup() {
  //Initialize Serial Monitor
  Serial.begin(115200);
  Serial.println("Serial Monitor initialised");

  if (!SPIFFS.begin(true)) {
    Serial.println("SPIFFS initialisation failed!");
    while(1) yield();
  }
  Serial.println("\r\nSPIFFS available!");

  // ESP32 will crash if any of the fonts are missing
  bool font_missing = false;
  if (SPIFFS.exists("/NotoSansBold15.vlw")    == false) font_missing = true;
  if (SPIFFS.exists("/NotoSansBold36.vlw")    == false) font_missing = true;
  if (SPIFFS.exists("/NotoSansMonoSCB20.vlw") == false) font_missing = true;

  if (font_missing)
  {
    Serial.println("\r\nFont missing in SPIFFS, did you upload it?");
    while(1) yield();
  }
  else Serial.println("\r\nFonts found OK.");

}

void loop() {

}

void draw() {

  int32_t x = 0; int32_t y = 0; int32_t w = 0; int32_t h = 0;

  tft.fillScreen(TFT_WHITE);            // Clear screen
  tft.setTextColor(TFT_GREY);
  spr.loadFont(NT_FONT_LARGE);

  /*****************************************************************************
   * 'led' warning lights
   * 
   *  gps -> orange : indoors, (test) data received ok
   *  gps -> green  : outdoors, data received ok
   *  gps -> grey   : data not received
   ****************************************************************************/
  tft.drawString("gps", 120, 20, GFXFF);  
  if (GPS_INDOORS_TEST) {
      if (GPS_DATA_RECVD_OK) {
          tft.fillSmoothCircle(110, 26, 4, TFT_ORANGE);
      } else {
          tft.fillSmoothCircle(110, 26, 4, TFT_GREY);
      }
  } else {
      if (GPS_DATA_RECVD_OK) {
          tft.fillSmoothCircle(110, 26, 4, TFT_GREEN);
      } else {
          tft.fillSmoothCircle(110, 26, 4, TFT_GREY);
      }
  }

  /*****************************************************************************
   * GPS Time 
   ****************************************************************************/
  x = 170; y = 4; w = 140; h = 64;
  tft.drawRoundRect(x, y, w, h, 10, TFT_GREY);
  tft.setFreeFont(FSSBO18);
  if (GPS_DATA_RECVD_OK) {
    // make string "HH:MM"
    // TODO: 24-hours format
    char buffer[50];
    sprintf(buffer, "%.2i:%.2i",
      myData.gps_time_hour,
      myData.gps_time_minute);
    String gps_time(buffer);
    tft.drawString(gps_time, x+6, y+8);
  }
  tft.setFreeFont(FF1);
  tft.drawString("GPS Time", x+10, y+42, GFXFF);

  /*****************************************************************************
   * GPS locations
   ****************************************************************************/  
  x = 170; y = 70; w = 140; h = 70;
  tft.drawRoundRect(x, y, w, h, 10, TFT_GREY);
  tft.setFreeFont(FF1);
  if (GPS_DATA_RECVD_OK) {
    tft.drawNumber(myData.gps_lat, x+6, y+8);  
    tft.drawNumber(myData.gps_lng, x+6, y+28);  
  }
  tft.drawString("GPS lat/lon", x+6, y+50, GFXFF);

  /*****************************************************************************
   * GPS speed 
   ****************************************************************************/  
  //  double gps_speed_kmph
  x = 170; y = 142; w = 140; h = 70;
  tft.drawRoundRect(x, y, w, h, 10, TFT_GREY);
  if (GPS_DATA_RECVD_OK) {
    tft.setFreeFont(FSSBO18);
    tft.drawNumber(myData.gps_speed_kmph, x+6, y+8);  
  }
  tft.setFreeFont(FF1);
  tft.drawString("Ground Speed (K/h)", x+6, y+50, GFXFF);

  //  double gps_altitude_meters

  /*****************************************************************************
   * Temp 
   ****************************************************************************/
  x = 4; y = 102; w = 82; h = 64;
  tft.drawRoundRect(x, y, w, h, 10, TFT_GREY);
  tft.setFreeFont(FSSBO18);
  tft.drawFloat(myData.temp, 1, x+5, y+8);  
  tft.setFreeFont(FF1);
  tft.drawString("Temp", x+8, y+42, GFXFF);

  /*****************************************************************************
   * Humidity 
   ****************************************************************************/
  x = 4; y = 170; w = 82; h = 64;
  tft.drawRoundRect(x, y, w, h, 10, TFT_GREY);
  tft.setFreeFont(FSSBO18);
  tft.drawFloat(myData.hum, 0, x+5, y+8);  
  tft.setFreeFont(FF1);
  tft.drawString("Humid.", x+8, y+42, GFXFF);  

  spr.unloadFont(); // Remove the font from sprite class to recover memory used
  spr.deleteSprite(); // Recover memory

  delay(1000);
}
